!function(t,e,n,r){function i(e,n){this.element=t(e),this.settings=t.extend({},o,n),this._defaults=o,this._name=s,this.init()}var s="metisMenu",o={toggle:!0,doubleTapToGo:!1};i.prototype={init:function(){var e=this.element,r=this.settings.toggle,i=this;this.isIE()<=9?(e.find("li.active").has("ul").children("ul").collapse("show"),e.find("li").not(".active").has("ul").children("ul").collapse("hide")):(e.find("li.active").has("ul").children("ul").addClass("collapse in"),e.find("li").not(".active").has("ul").children("ul").addClass("collapse")),i.settings.doubleTapToGo&&e.find("li.active").has("ul").children("a").addClass("doubleTapToGo"),e.find("li").has("ul").children("a").on("click."+s,function(e){return e.preventDefault(),i.settings.doubleTapToGo&&i.doubleTapToGo(t(this))&&"#"!==t(this).attr("href")&&""!==t(this).attr("href")?(e.stopPropagation(),void(n.location=t(this).attr("href"))):(t(this).parent("li").toggleClass("active").children("ul").collapse("toggle"),void(r&&t(this).parent("li").siblings().removeClass("active").children("ul.in").collapse("hide")))})},isIE:function(){for(var t,e=3,r=n.createElement("div"),i=r.getElementsByTagName("i");r.innerHTML="<!--[if gt IE "+ ++e+"]><i></i><![endif]-->",i[0];)return e>4?e:t},doubleTapToGo:function(t){var e=this.element;return t.hasClass("doubleTapToGo")?(t.removeClass("doubleTapToGo"),!0):t.parent().children("ul").length?(e.find(".doubleTapToGo").removeClass("doubleTapToGo"),t.addClass("doubleTapToGo"),!1):void 0},remove:function(){this.element.off("."+s),this.element.removeData(s)}},t.fn[s]=function(e){return this.each(function(){var n=t(this);n.data(s)&&n.data(s).remove(),n.data(s,new i(this,e))}),this}}(jQuery,window,document),function(e){e.fn.extend({slimScroll:function(n){var r={width:"auto",height:"250px",size:"7px",color:"#000",position:"right",distance:"1px",start:"top",opacity:.4,alwaysVisible:!1,disableFadeOut:!1,railVisible:!1,railColor:"#333",railOpacity:.2,railDraggable:!0,railClass:"slimScrollRail",barClass:"slimScrollBar",wrapperClass:"slimScrollDiv",allowPageScroll:!1,wheelStep:20,touchScrollStep:200,borderRadius:"7px",railBorderRadius:"7px"},i=e.extend(r,n);return this.each(function(){function r(t){if(c){var t=t||window.event,n=0;t.wheelDelta&&(n=-t.wheelDelta/120),t.detail&&(n=t.detail/3);var r=t.target||t.srcTarget||t.srcElement;e(r).closest("."+i.wrapperClass).is(T.parent())&&s(n,!0),t.preventDefault&&!b&&t.preventDefault(),b||(t.returnValue=!1)}}function s(t,e,n){b=!1;var r=t,s=T.outerHeight()-E.outerHeight();if(e&&(r=parseInt(E.css("top"))+t*parseInt(i.wheelStep)/100*E.outerHeight(),r=Math.min(Math.max(r,0),s),r=t>0?Math.ceil(r):Math.floor(r),E.css({top:r+"px"})),m=parseInt(E.css("top"))/(T.outerHeight()-E.outerHeight()),r=m*(T[0].scrollHeight-T.outerHeight()),n){r=t;var o=r/T[0].scrollHeight*T.outerHeight();o=Math.min(Math.max(o,0),s),E.css({top:o+"px"})}T.scrollTop(r),T.trigger("slimscrolling",~~r),l(),u()}function o(){window.addEventListener?(this.addEventListener("DOMMouseScroll",r,!1),this.addEventListener("mousewheel",r,!1)):document.attachEvent("onmousewheel",r)}function a(){f=Math.max(T.outerHeight()/T[0].scrollHeight*T.outerHeight(),y),E.css({height:f+"px"});var t=f==T.outerHeight()?"none":"block";E.css({display:t})}function l(){if(a(),clearTimeout(d),m==~~m){if(b=i.allowPageScroll,v!=m){var t=0==~~m?"top":"bottom";T.trigger("slimscroll",t)}}else b=!1;return v=m,f>=T.outerHeight()?void(b=!0):(E.stop(!0,!0).fadeIn("fast"),void(i.railVisible&&k.stop(!0,!0).fadeIn("fast")))}function u(){i.alwaysVisible||(d=setTimeout(function(){i.disableFadeOut&&c||h||p||(E.fadeOut("slow"),k.fadeOut("slow"))},1e3))}var c,h,p,d,g,f,m,v,w="<div></div>",y=30,b=!1,T=e(this);if(T.parent().hasClass(i.wrapperClass)){var S=T.scrollTop();if(E=T.parent().find("."+i.barClass),k=T.parent().find("."+i.railClass),a(),e.isPlainObject(n)){if("height"in n&&"auto"==n.height){T.parent().css("height","auto"),T.css("height","auto");var x=T.parent().parent().height();T.parent().css("height",x),T.css("height",x)}if("scrollTo"in n)S=parseInt(i.scrollTo);else if("scrollBy"in n)S+=parseInt(i.scrollBy);else if("destroy"in n)return E.remove(),k.remove(),void T.unwrap();s(S,!1,!0)}}else if(!(e.isPlainObject(n)&&"destroy"in n)){i.height="auto"==i.height?T.parent().height():i.height;var C=e(w).addClass(i.wrapperClass).css({position:"relative",overflow:"hidden",width:i.width,height:i.height});T.css({overflow:"hidden",width:i.width,height:i.height});var k=e(w).addClass(i.railClass).css({width:i.size,height:"100%",position:"absolute",top:0,display:i.alwaysVisible&&i.railVisible?"block":"none","border-radius":i.railBorderRadius,background:i.railColor,opacity:i.railOpacity,zIndex:90}),E=e(w).addClass(i.barClass).css({background:i.color,width:i.size,position:"absolute",top:0,opacity:i.opacity,display:i.alwaysVisible?"block":"none","border-radius":i.borderRadius,BorderRadius:i.borderRadius,MozBorderRadius:i.borderRadius,WebkitBorderRadius:i.borderRadius,zIndex:99}),R="right"==i.position?{right:i.distance}:{left:i.distance};k.css(R),E.css(R),T.wrap(C),T.parent().append(E),T.parent().append(k),i.railDraggable&&E.bind("mousedown",function(n){var r=e(document);return p=!0,t=parseFloat(E.css("top")),pageY=n.pageY,r.bind("mousemove.slimscroll",function(e){currTop=t+e.pageY-pageY,E.css("top",currTop),s(0,E.position().top,!1)}),r.bind("mouseup.slimscroll",function(t){p=!1,u(),r.unbind(".slimscroll")}),!1}).bind("selectstart.slimscroll",function(t){return t.stopPropagation(),t.preventDefault(),!1}),k.hover(function(){l()},function(){u()}),E.hover(function(){h=!0},function(){h=!1}),T.hover(function(){c=!0,l(),u()},function(){c=!1,u()}),T.bind("touchstart",function(t,e){t.originalEvent.touches.length&&(g=t.originalEvent.touches[0].pageY)}),T.bind("touchmove",function(t){if(b||t.originalEvent.preventDefault(),t.originalEvent.touches.length){var e=(g-t.originalEvent.touches[0].pageY)/i.touchScrollStep;s(e,!0),g=t.originalEvent.touches[0].pageY}}),a(),"bottom"===i.start?(E.css({top:T.outerHeight()-E.outerHeight()}),s(0,!0)):"top"!==i.start&&(s(e(i.start).position().top,null,!0),i.alwaysVisible||E.hide()),o()}}),this}}),e.fn.extend({slimscroll:e.fn.slimScroll})}(jQuery),function(){var t,e,n,r,i,s,o,a,l,u,c,h,p,d,g,f,m,v,w,y,b,T,S,x,C,k,E,R,L,q,P,M,O,H,j,D,I,_,F,G,N,A,z,B,V,U,W,Y,X,Q=[].slice,J={}.hasOwnProperty,K=function(t,e){function n(){this.constructor=t}for(var r in e)J.call(e,r)&&(t[r]=e[r]);return n.prototype=e.prototype,t.prototype=new n,t.__super__=e.prototype,t},Z=[].indexOf||function(t){for(var e=0,n=this.length;n>e;e++)if(e in this&&this[e]===t)return e;return-1};for(b={catchupTime:100,initialRate:.03,minTime:250,ghostTime:100,maxProgressPerFrame:20,easeFactor:1.25,startOnPageLoad:!0,restartOnPushState:!0,restartOnRequestAfter:500,target:"body",elements:{checkInterval:100,selectors:["body"]},eventLag:{minSamples:10,sampleCount:3,lagThreshold:3},ajax:{trackMethods:["GET"],trackWebSockets:!0,ignoreURLs:[]}},L=function(){var t;return null!=(t="undefined"!=typeof performance&&null!==performance&&"function"==typeof performance.now?performance.now():void 0)?t:+new Date},P=window.requestAnimationFrame||window.mozRequestAnimationFrame||window.webkitRequestAnimationFrame||window.msRequestAnimationFrame,y=window.cancelAnimationFrame||window.mozCancelAnimationFrame,null==P&&(P=function(t){return setTimeout(t,50)},y=function(t){return clearTimeout(t)}),O=function(t){var e,n;return e=L(),(n=function(){var r;return r=L()-e,r>=33?(e=L(),t(r,function(){return P(n)})):setTimeout(n,33-r)})()},M=function(){var t,e,n;return n=arguments[0],e=arguments[1],t=3<=arguments.length?Q.call(arguments,2):[],"function"==typeof n[e]?n[e].apply(n,t):n[e]},T=function(){var t,e,n,r,i,s,o;for(e=arguments[0],r=2<=arguments.length?Q.call(arguments,1):[],s=0,o=r.length;o>s;s++)if(n=r[s])for(t in n)J.call(n,t)&&(i=n[t],null!=e[t]&&"object"==typeof e[t]&&null!=i&&"object"==typeof i?T(e[t],i):e[t]=i);return e},m=function(t){var e,n,r,i,s;for(n=e=0,i=0,s=t.length;s>i;i++)r=t[i],n+=Math.abs(r),e++;return n/e},x=function(t,e){var n,r,i;if(null==t&&(t="options"),null==e&&(e=!0),i=document.querySelector("[data-pace-"+t+"]")){if(n=i.getAttribute("data-pace-"+t),!e)return n;try{return JSON.parse(n)}catch(s){return r=s,"undefined"!=typeof console&&null!==console?console.error("Error parsing inline pace options",r):void 0}}},o=function(){function t(){}return t.prototype.on=function(t,e,n,r){var i;return null==r&&(r=!1),null==this.bindings&&(this.bindings={}),null==(i=this.bindings)[t]&&(i[t]=[]),this.bindings[t].push({handler:e,ctx:n,once:r})},t.prototype.once=function(t,e,n){return this.on(t,e,n,!0)},t.prototype.off=function(t,e){var n,r,i;if(null!=(null!=(r=this.bindings)?r[t]:void 0)){if(null==e)return delete this.bindings[t];for(n=0,i=[];n<this.bindings[t].length;)i.push(this.bindings[t][n].handler===e?this.bindings[t].splice(n,1):n++);return i}},t.prototype.trigger=function(){var t,e,n,r,i,s,o,a,l;if(n=arguments[0],t=2<=arguments.length?Q.call(arguments,1):[],null!=(o=this.bindings)?o[n]:void 0){for(i=0,l=[];i<this.bindings[n].length;)a=this.bindings[n][i],r=a.handler,e=a.ctx,s=a.once,r.apply(null!=e?e:this,t),l.push(s?this.bindings[n].splice(i,1):i++);return l}},t}(),u=window.Pace||{},window.Pace=u,T(u,o.prototype),q=u.options=T({},b,window.paceOptions,x()),W=["ajax","document","eventLag","elements"],z=0,V=W.length;V>z;z++)I=W[z],q[I]===!0&&(q[I]=b[I]);l=function(t){function e(){return Y=e.__super__.constructor.apply(this,arguments)}return K(e,t),e}(Error),e=function(){function t(){this.progress=0}return t.prototype.getElement=function(){var t;if(null==this.el){if(t=document.querySelector(q.target),!t)throw new l;this.el=document.createElement("div"),this.el.className="pace pace-active",document.body.className=document.body.className.replace(/pace-done/g,""),document.body.className+=" pace-running",this.el.innerHTML='<div class="pace-progress">\n  <div class="pace-progress-inner"></div>\n</div>\n<div class="pace-activity"></div>',null!=t.firstChild?t.insertBefore(this.el,t.firstChild):t.appendChild(this.el)}return this.el},t.prototype.finish=function(){var t;return t=this.getElement(),t.className=t.className.replace("pace-active",""),t.className+=" pace-inactive",document.body.className=document.body.className.replace("pace-running",""),document.body.className+=" pace-done"},t.prototype.update=function(t){return this.progress=t,this.render()},t.prototype.destroy=function(){try{this.getElement().parentNode.removeChild(this.getElement())}catch(t){l=t}return this.el=void 0},t.prototype.render=function(){var t,e,n,r,i,s,o;if(null==document.querySelector(q.target))return!1;for(t=this.getElement(),r="translate3d("+this.progress+"%, 0, 0)",o=["webkitTransform","msTransform","transform"],i=0,s=o.length;s>i;i++)e=o[i],t.children[0].style[e]=r;return(!this.lastRenderedProgress||this.lastRenderedProgress|0!==this.progress|0)&&(t.children[0].setAttribute("data-progress-text",""+(0|this.progress)+"%"),this.progress>=100?n="99":(n=this.progress<10?"0":"",n+=0|this.progress),t.children[0].setAttribute("data-progress",""+n)),this.lastRenderedProgress=this.progress},t.prototype.done=function(){return this.progress>=100},t}(),a=function(){function t(){this.bindings={}}return t.prototype.trigger=function(t,e){var n,r,i,s,o;if(null!=this.bindings[t]){for(s=this.bindings[t],o=[],r=0,i=s.length;i>r;r++)n=s[r],o.push(n.call(this,e));return o}},t.prototype.on=function(t,e){var n;return null==(n=this.bindings)[t]&&(n[t]=[]),this.bindings[t].push(e)},t}(),A=window.XMLHttpRequest,N=window.XDomainRequest,G=window.WebSocket,S=function(t,e){var n,r,i;i=[];for(r in e.prototype)try{i.push(null==t[r]&&"function"!=typeof e[r]?"function"==typeof Object.defineProperty?Object.defineProperty(t,r,{get:function(){return e.prototype[r]},configurable:!0,enumerable:!0}):t[r]=e.prototype[r]:void 0)}catch(s){n=s}return i},E=[],u.ignore=function(){var t,e,n;return e=arguments[0],t=2<=arguments.length?Q.call(arguments,1):[],E.unshift("ignore"),n=e.apply(null,t),E.shift(),n},u.track=function(){var t,e,n;return e=arguments[0],t=2<=arguments.length?Q.call(arguments,1):[],E.unshift("track"),n=e.apply(null,t),E.shift(),n},D=function(t){var e;if(null==t&&(t="GET"),"track"===E[0])return"force";if(!E.length&&q.ajax){if("socket"===t&&q.ajax.trackWebSockets)return!0;if(e=t.toUpperCase(),Z.call(q.ajax.trackMethods,e)>=0)return!0}return!1},c=function(t){function e(){var t,n=this;e.__super__.constructor.apply(this,arguments),t=function(t){var e;return e=t.open,t.open=function(r,i,s){return D(r)&&n.trigger("request",{type:r,url:i,request:t}),e.apply(t,arguments)}},window.XMLHttpRequest=function(e){var n;return n=new A(e),t(n),n};try{S(window.XMLHttpRequest,A)}catch(r){}if(null!=N){window.XDomainRequest=function(){var e;return e=new N,t(e),e};try{S(window.XDomainRequest,N)}catch(r){}}if(null!=G&&q.ajax.trackWebSockets){window.WebSocket=function(t,e){var r;return r=null!=e?new G(t,e):new G(t),D("socket")&&n.trigger("request",{type:"socket",url:t,protocols:e,request:r}),r};try{S(window.WebSocket,G)}catch(r){}}}return K(e,t),e}(a),B=null,C=function(){return null==B&&(B=new c),B},j=function(t){var e,n,r,i;for(i=q.ajax.ignoreURLs,n=0,r=i.length;r>n;n++)if(e=i[n],"string"==typeof e){if(-1!==t.indexOf(e))return!0}else if(e.test(t))return!0;return!1},C().on("request",function(e){var n,r,i,s,o;return s=e.type,i=e.request,o=e.url,j(o)?void 0:u.running||q.restartOnRequestAfter===!1&&"force"!==D(s)?void 0:(r=arguments,n=q.restartOnRequestAfter||0,"boolean"==typeof n&&(n=0),setTimeout(function(){var e,n,o,a,l,c;if(e="socket"===s?i.readyState<2:0<(a=i.readyState)&&4>a){for(u.restart(),l=u.sources,c=[],n=0,o=l.length;o>n;n++){if(I=l[n],I instanceof t){I.watch.apply(I,r);break}c.push(void 0)}return c}},n))}),t=function(){function t(){var t=this;this.elements=[],C().on("request",function(){return t.watch.apply(t,arguments)})}return t.prototype.watch=function(t){var e,n,r,i;return r=t.type,e=t.request,i=t.url,j(i)?void 0:(n="socket"===r?new d(e):new g(e),this.elements.push(n))},t}(),g=function(){function t(t){var e,n,r,i,s,o,a=this;if(this.progress=0,null!=window.ProgressEvent)for(n=null,t.addEventListener("progress",function(t){return a.progress=t.lengthComputable?100*t.loaded/t.total:a.progress+(100-a.progress)/2},!1),o=["load","abort","timeout","error"],r=0,i=o.length;i>r;r++)e=o[r],t.addEventListener(e,function(){return a.progress=100},!1);else s=t.onreadystatechange,t.onreadystatechange=function(){var e;return 0===(e=t.readyState)||4===e?a.progress=100:3===t.readyState&&(a.progress=50),"function"==typeof s?s.apply(null,arguments):void 0}}return t}(),d=function(){function t(t){var e,n,r,i,s=this;for(this.progress=0,i=["error","open"],n=0,r=i.length;r>n;n++)e=i[n],t.addEventListener(e,function(){return s.progress=100},!1)}return t}(),r=function(){function t(t){var e,n,r,s;for(null==t&&(t={}),this.elements=[],null==t.selectors&&(t.selectors=[]),s=t.selectors,n=0,r=s.length;r>n;n++)e=s[n],this.elements.push(new i(e))}return t}(),i=function(){function t(t){this.selector=t,this.progress=0,this.check()}return t.prototype.check=function(){var t=this;return document.querySelector(this.selector)?this.done():setTimeout(function(){return t.check()},q.elements.checkInterval)},t.prototype.done=function(){return this.progress=100},t}(),n=function(){function t(){var t,e,n=this;this.progress=null!=(e=this.states[document.readyState])?e:100,t=document.onreadystatechange,document.onreadystatechange=function(){return null!=n.states[document.readyState]&&(n.progress=n.states[document.readyState]),"function"==typeof t?t.apply(null,arguments):void 0}}return t.prototype.states={loading:0,interactive:50,complete:100},t}(),s=function(){function t(){var t,e,n,r,i,s=this;this.progress=0,t=0,i=[],r=0,n=L(),e=setInterval(function(){var o;return o=L()-n-50,n=L(),i.push(o),i.length>q.eventLag.sampleCount&&i.shift(),t=m(i),++r>=q.eventLag.minSamples&&t<q.eventLag.lagThreshold?(s.progress=100,clearInterval(e)):s.progress=100*(3/(t+3))},50)}return t}(),p=function(){function t(t){this.source=t,this.last=this.sinceLastUpdate=0,this.rate=q.initialRate,this.catchup=0,this.progress=this.lastProgress=0,null!=this.source&&(this.progress=M(this.source,"progress"))}return t.prototype.tick=function(t,e){var n;return null==e&&(e=M(this.source,"progress")),e>=100&&(this.done=!0),e===this.last?this.sinceLastUpdate+=t:(this.sinceLastUpdate&&(this.rate=(e-this.last)/this.sinceLastUpdate),this.catchup=(e-this.progress)/q.catchupTime,this.sinceLastUpdate=0,this.last=e),e>this.progress&&(this.progress+=this.catchup*t),n=1-Math.pow(this.progress/100,q.easeFactor),this.progress+=n*this.rate*t,this.progress=Math.min(this.lastProgress+q.maxProgressPerFrame,this.progress),this.progress=Math.max(0,this.progress),this.progress=Math.min(100,this.progress),this.lastProgress=this.progress,this.progress},t}(),_=null,H=null,v=null,F=null,f=null,w=null,u.running=!1,k=function(){return q.restartOnPushState?u.restart():void 0},null!=window.history.pushState&&(U=window.history.pushState,window.history.pushState=function(){return k(),U.apply(window.history,arguments)}),null!=window.history.replaceState&&(X=window.history.replaceState,window.history.replaceState=function(){return k(),X.apply(window.history,arguments)}),h={ajax:t,elements:r,document:n,eventLag:s},(R=function(){var t,n,r,i,s,o,a,l;for(u.sources=_=[],o=["ajax","elements","document","eventLag"],n=0,i=o.length;i>n;n++)t=o[n],q[t]!==!1&&_.push(new h[t](q[t]));for(l=null!=(a=q.extraSources)?a:[],r=0,s=l.length;s>r;r++)I=l[r],_.push(new I(q));return u.bar=v=new e,H=[],F=new p})(),u.stop=function(){return u.trigger("stop"),u.running=!1,v.destroy(),w=!0,null!=f&&("function"==typeof y&&y(f),f=null),R()},u.restart=function(){return u.trigger("restart"),u.stop(),u.start()},u.go=function(){var t;return u.running=!0,v.render(),t=L(),w=!1,f=O(function(e,n){var r,i,s,o,a,l,c,h,d,g,f,m,y,b,T,S;for(h=100-v.progress,i=f=0,s=!0,l=m=0,b=_.length;b>m;l=++m)for(I=_[l],g=null!=H[l]?H[l]:H[l]=[],a=null!=(S=I.elements)?S:[I],c=y=0,T=a.length;T>y;c=++y)o=a[c],d=null!=g[c]?g[c]:g[c]=new p(o),s&=d.done,d.done||(i++,f+=d.tick(e));return r=f/i,v.update(F.tick(e,r)),v.done()||s||w?(v.update(100),u.trigger("done"),setTimeout(function(){return v.finish(),u.running=!1,u.trigger("hide")},Math.max(q.ghostTime,Math.max(q.minTime-(L()-t),0)))):n()})},u.start=function(t){T(q,t),u.running=!0;try{v.render()}catch(e){l=e}return document.querySelector(".pace")?(u.trigger("start"),u.go()):setTimeout(u.start,50)},"function"==typeof define&&define.amd?define(["pace"],function(){return u}):"object"==typeof exports?module.exports=u:q.startOnPageLoad&&u.start()}.call(this),function(t){t(document).ready(function(){function e(){var e=t("body > #wrapper").height()-61;t(".sidebard-panel").css("min-height",e+"px");var n=t("nav.navbar-default").height(),r=t("#page-wrapper").height();n>r&&t("#page-wrapper").css("min-height",n+"px"),r>n&&t("#page-wrapper").css("min-height",t(window).height()+"px")}t(window).bind("load resize scroll",function(){t("body").hasClass("body-small")||e()}),t(window).scroll(function(){t(window).scrollTop()>0&&!t("body").hasClass("fixed-nav")?t("#right-sidebar").addClass("sidebar-top"):t("#right-sidebar").removeClass("sidebar-top")}),setTimeout(function(){e()})}),t(window).bind("load resize",function(){t(this).width()<769?t("body").addClass("body-small"):t("body").removeClass("body-small")})}(window.jQuery);
//# sourceMappingURL=data:application/json;base64,